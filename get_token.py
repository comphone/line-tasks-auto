#!/usr/bin/env python3
"""
Enhanced Google API Token Generator
- ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏¢‡∏∑‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô (Production mode)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth consent screen
- ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏•‡∏∏‡∏î‡∏ö‡πà‡∏≠‡∏¢
"""

import os
import json
import sys
from datetime import datetime, timedelta
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# Scopes ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô app.py
SCOPES = [
    'https://www.googleapis.com/auth/tasks',
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/calendar.events'
]

def check_oauth_setup():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth consent screen"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth consent screen...")
    print("üìã ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤:")
    print("   ‚úÖ OAuth consent screen ‡πÄ‡∏õ‡πá‡∏ô 'In production' mode")
    print("   ‚úÖ Application type ‡πÄ‡∏õ‡πá‡∏ô 'Desktop application'")
    print("   ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô APIs: Tasks, Drive, Calendar")
    print("")

def create_credentials():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á credentials ‡πÉ‡∏´‡∏°‡πà"""
    creds = None
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå client_secrets.json
    if not os.path.exists('client_secrets.json'):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå client_secrets.json")
        print("üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á:")
        print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google Cloud Console")
        print("   2. APIs & Services ‚Üí Credentials")
        print("   3. ‡∏™‡∏£‡πâ‡∏≤‡∏á OAuth 2.0 Client ID ‡πÅ‡∏ö‡∏ö 'Desktop application'")
        print("   4. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î JSON ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ client_secrets.json")
        return None
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
    with open('client_secrets.json', 'r') as f:
        client_config = json.load(f)
    
#    if 'installed' not in client_config:
#        print("‚ùå client_secrets.json ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö!")
#        print("üîß ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö 'Desktop application' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'Web application'")
#        return None
    
    print("‚úÖ client_secrets.json ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÄ‡∏Å‡πà‡∏≤
    if os.path.exists('token.json'):
        print("üîç ‡∏û‡∏ö token ‡πÄ‡∏Å‡πà‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...")
        try:
            creds = Credentials.from_authorized_user_file('token.json', SCOPES)
            if creds and creds.valid:
                print("‚úÖ Token ‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
                return creds
            elif creds and creds.expired and creds.refresh_token:
                print("üîÑ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh...")
                try:
                    creds.refresh(Request())
                    print("‚úÖ Refresh token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    return creds
                except Exception as e:
                    print(f"‚ùå Refresh ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                    print("üîß ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà")
        except Exception as e:
            print(f"‚ùå Token ‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà
    print("üîê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà...")
    try:
        flow = InstalledAppFlow.from_client_secrets_file(
            'client_secrets.json', 
            SCOPES,
            redirect_uri='http://localhost:8080'  # ‡∏£‡∏∞‡∏ö‡∏∏ redirect URI ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        )
        
        print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠ authorize...")
        print("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•")
        
        creds = flow.run_local_server(
            port=8080,
            prompt='select_account',
            authorization_prompt_message='Please visit this URL to authorize the application: {url}',
            success_message='Authorization successful! You can close this tab.',
            open_browser=True
        )
        
        print("‚úÖ Authorization ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return creds
        
    except Exception as e:
        print(f"‚ùå Error during authorization: {e}")
        print("üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö internet connection")
        print("   2. ‡∏õ‡∏¥‡∏î VPN (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        print("   3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ port ‡∏≠‡∏∑‡πà‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î)")
        return None

def save_token(creds):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token"""
    if not creds:
        return False
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
    with open('token.json', 'w') as token:
        token.write(creds.to_json())
    print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á environment variable format
    token_json = creds.to_json()
    print("\n" + "="*80)
    print("üéØ GOOGLE_TOKEN_JSON Environment Variable:")
    print("="*80)
    print(token_json)
    print("="*80)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token
    token_data = json.loads(token_json)
    print(f"\nüìä Token Information:")
    print(f"   üîë Client ID: {token_data.get('client_id', 'N/A')[:50]}...")
    
    if 'expiry' in token_data and token_data['expiry']:
        expiry = datetime.fromisoformat(token_data['expiry'].replace('Z', '+00:00'))
        print(f"   ‚è∞ Expires: {expiry}")
        time_left = expiry - datetime.now().replace(tzinfo=expiry.tzinfo)
        print(f"   ‚è≥ Time left: {time_left}")
    else:
        print("   ‚ôæÔ∏è  Token: No expiry (Production mode)")
    
    return True

def test_token(creds):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Tasks API
        service = build('tasks', 'v1', credentials=creds)
        tasklists = service.tasklists().list().execute()
        print("‚úÖ Tasks API: OK")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Drive API
        service = build('drive', 'v3', credentials=creds)
        results = service.files().list(pageSize=1).execute()
        print("‚úÖ Drive API: OK")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Calendar API
        service = build('calendar', 'v3', credentials=creds)
        calendars = service.calendarList().list().execute()
        print("‚úÖ Calendar API: OK")
        
        print("üéâ ‡∏ó‡∏∏‡∏Å API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing APIs: {e}")
        return False

def main():
    print("üöÄ Enhanced Google API Token Generator")
    print("="*50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    check_oauth_setup()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á credentials
    creds = create_credentials()
    if not creds:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÑ‡∏î‡πâ")
        sys.exit(1)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token
    if not save_token(creds):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÑ‡∏î‡πâ")
        sys.exit(1)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token
    if not test_token(creds):
        print("‚ö†Ô∏è  Token ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô API access")
    
    print("\nüéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
    print("1. üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å GOOGLE_TOKEN_JSON ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô")
    print("2. üîß ‡πÑ‡∏õ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Render.com Environment Variables")
    print("3. üöÄ Deploy ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà")
    print("4. üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà /admin/token_status")
    
    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == '__main__':
    main()